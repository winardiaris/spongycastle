buildscript {
   repositories {
       maven {
         url "https://plugins.gradle.org/m2/"
       }
   }

   dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:2.2.8"
   }
}

allprojects {
   apply plugin: 'java'
   apply plugin: 'idea'
   apply plugin: 'net.saliman.cobertura'

   repositories {
       mavenCentral()
   }

   dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
        // Cobertura declares a dependency on the slf4j API, so we need to supply
        // a runtime implementation to avoid NoClassDefFoundErrors
        testRuntime "org.slf4j:slf4j-log4j12:1.7.5"
        testRuntime "log4j:log4j:1.2.17"
   }
}

ext {
    bcTestDataHome = file('core/src/test/data').absolutePath
}

subprojects {
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    group = 'com.madgag.spongycastle'

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar

        archives javadocJar
        archives sourcesJar
    }

    if (project.hasProperty("signing.keyId")) {
        signing {
            sign configurations.archives
        }
    }

    if (project.hasProperty("sonatypeUsername")) {
        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }

                    pom.project {
                        name 'Spongy Castle'
                        packaging 'jar'
                        description 'Spongy Castle is a package-rename (org.bouncycastle.* to org.spongycastle.*) of Bouncy Castle\n' +
                                'intended for the Android platform. Android unfortunately ships with a stripped-down version of\n' +
                                'Bouncy Castle, which prevents easy upgrades - Spongy Castle overcomes this and provides a full,\n' +
                                'up-to-date version of the Bouncy Castle cryptographic libs.'
                        url 'http://rtyley.github.io/spongycastle/'

                        scm {
                            url 'scm:git@github.com:rtyley/spongycastle.git'
                            connection 'scm:git@github.com:rtyley/spongycastle.git'
                            developerConnection 'scm:git@github.com:rtyley/spongycastle.git'
                        }

                        licenses {
                            license {
                                name 'Bouncy Castle Licence'
                                url 'http://www.bouncycastle.org/licence.html'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'rtyley'
                                name 'Roberto Tyley'
                            }
                        }
                    }
                }
            }
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    sourceCompatibility = 1.5
    targetCompatibility = 1.5
    version = '1.59-SNAPSHOT'

    test {
        systemProperty 'bc.test.data.home', bcTestDataHome

        filter {
            includeTestsMatching "*AllTests"
        }
    }
}

test.dependsOn([':core:test', ':prov:test', ':tls:test', ':pkix:test', 'pg:test'])

cobertura {
   coverageDirs = [
        "${rootProject.projectDir}/core/build/classes/main",
        "${rootProject.projectDir}/mail/build/classes/main",
        "${rootProject.projectDir}/pg/build/classes/main",
        "${rootProject.projectDir}/pkix/build/classes/main",
        "${rootProject.projectDir}/prov/build/classes/main",
        "${rootProject.projectDir}/tls/build/classes/main",
   ]
   coverageSourceDirs = [
        "${rootProject.projectDir}/core/src/main/java",
        "${rootProject.projectDir}/mail/src/main/java",
        "${rootProject.projectDir}/pg/src/main/java",
        "${rootProject.projectDir}/pkix/src/main/java",
        "${rootProject.projectDir}/prov/src/main/java",
        "${rootProject.projectDir}/tls/src/main/java",
   ]
   coverageMergeDatafiles = [
          file("${rootProject.projectDir}/core/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/mail/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/pg/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/pkix/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/prov/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/tls/build/cobertura/cobertura.ser"),
   ]
   auxiliaryClasspath += files("${rootProject.projectDir}/core/build/classes/main")
   coverageFormats = ['html', 'xml']
   coverageReportDir = new File("${rootProject.projectDir}/build/reports/cobertura")
}

